/*
 * This rule checks for the number of dead ifstates at any given time in
 * the system. A dead Ifstate gets garbage collected once all the consumers
 * see the corresponding delete message. If these dead ifstates continue to
 * pile up, this indicates a garbage collection problem and can eat up
 * significant resources such as memory and indices.
 *
 * This rule monitors the number of dead Ifstates and raises an alarm if there
 * are too many of these (> 50% of alive ifstates) detected for significant
 * duration of time (1 hour).
 */
iceberg {
    topic kernel.ifstate {
        rule check-too-many-dead-ifstates-iagent {
            function get-dead-alive-ratio {
                description "Returns dead-alive ratio";
                path get-dead-alive-ratio.py;
                method get_dead_alive_ratio;
                argument alive_ifstates_cnt {
                    mandatory;
                }
                argument dead_ifstates_cnt {
                    mandatory;
                }
            }
            sensor dead-alive-sensor {
                synopsis "number of dead/alive ifstates iAgent sensor";
                description "monitor number of dead and alive ifstates on the network device";
                iAgent {
                    file deadalive.yml;
                    table deadaliveTable;
                    frequency 10m;
                }
            }
            field alive-cnt {
                sensor dead-alive-sensor {
                    path alive;
                }
                type integer;
            }
            field dead-cnt {
                sensor dead-alive-sensor {
                    path dead;
                }
                type integer;
            }
            field ratio {
                formula {
                    user-defined-function {
                        function-name get-dead-alive-ratio;
                        argument alive_ifstates_cnt "$alive-cnt";
                        argument dead_ifstates_cnt "$dead-cnt";
                    }
                }
                type integer;
            }
            trigger report-dead-alive-ifstates-ratio-iagent {
                synopsis "report dead/alive ifstate on the system";
                description "monitor and report the ratio of number of dead/alive ifstates on the system and raise a alarm if the ratio is above an allowed threshold";
                frequency 10m; 
                term dead-alive-cnt-normal-iagent {
                    when {
                        equal-to "$ratio" 0;
                    }
                    then {
                        status {
                            color green;
                            message "Dead ifstates below threshold. No anomaly detected. #Alive-ifstates: alive-cnt #Dead-ifstates: dead-cnt";
                        }
                    }
                }
                term dead-alive-cnt-abnormal-iagent {
                    when {
                        equal-to "$ratio" 1 {
                            time-range 1h;
                            all;
                        }
                    }
                    then {
                        status {
                            color red;
                            message "Dead ifstates above threshold, monitor system activity, Refer readme for details #Alive-ifstates: $alive-cnt #Dead-ifstates: $dead-cnt";
                        }
                    }
                }
                term default {
                    then {
                        status {
                            color green;
                            message "Temporary spike in #dead-ifstate can be seen and is expected";
                        }
                    }
                }
            }
        }
    }
}
