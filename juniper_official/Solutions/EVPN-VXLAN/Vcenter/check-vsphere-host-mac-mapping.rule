/*
 * Collects vm host information from EVPN nodes and maps with vcenter ESXi host 
 * by querying database of rule vcenter.evpn/get-vsphere-details and displays entire
 * path in dashboard.
 *
 * Four input controls detection
 * 
 *   1) db-server-ip, user need to enter HB DB server ip while deploying 
 *      playbook.
 *   2) db-port, user need to enter HB DB server udp port while deploying
 *      playbook.
 *   3) vsphere-device-group, user need to enter vcenter device group name 
 *      i.e. where playbook "get-vsphere-details" deployed.
 *   4) vsphere-device, user need to enter vcenter device name which should
 *      be part of device group.
 *
 */
healthbot {
    topic vcenter.evpn {
        rule check-vsphere-host-mac-mapping {
            keys [ lldp-local-interface lldp-remote-system-name ];
            synopsis "VM path finder in EVPN";
            description "Collects datacenter VMs information from Vsphere  and LLDP information from routers and maps \"ESXi-VM-IP-MAC-Leaf Node-Egress Interface\" path by referring rule vmware/get-vsphere-details";
            /*
             * Functions defined to get vcenter information.
             */
            function get_cluster_name {
                description "Function to query rule's vcenter.evpn/get-vsphere-details database table and collect ESXi cluster name";
                path get_vsphere_details.py;
                method get_cluster_name;
                argument db_port {
                    mandatory;
                }
                argument db_server_ip {
                    mandatory;
                }
                argument remote_host_name {
                    mandatory;
                }
                argument vsphere_device {
                    mandatory;
                }
                argument vsphere_device_group {
                    mandatory;
                }
            }
            function get_datacenter_name {
                description "Function to query rule's vcenter.evpn/get-vsphere-details database table and collect datacenter name";
                path get_vsphere_details.py;
                method get_datacenter_name;
                argument db_port {
                    mandatory;
                }
                argument db_server_ip {
                    mandatory;
                }
                argument remote_host_name {
                    mandatory;
                }
                argument vsphere_device {
                    mandatory;
                }
                argument vsphere_device_group {
                    mandatory;
                }
            }
            function get_mac_id {
                description "Function to query rule's vcenter.evpn/get-vsphere-details database table and collect VM's mac address";
                path get_vsphere_details.py;
                method get_mac_id;
                argument db_port {
                    mandatory;
                }
                argument db_server_ip {
                    mandatory;
                }
                argument remote_host_name {
                    mandatory;
                }
                argument vsphere_device {
                    mandatory;
                }
                argument vsphere_device_group {
                    mandatory;
                }
            }
            function get_vm_ip {
                description "Function to query rule's vcenter.evpn/get-vsphere-details database table and collect VM's IP address";
                path get_vsphere_details.py;
                method get_vm_ip;
                argument db_port {
                    mandatory;
                }
                argument db_server_ip {
                    mandatory;
                }
                argument remote_host_name {
                    mandatory;
                }
                argument vsphere_device {
                    mandatory;
                }
                argument vsphere_device_group {
                    mandatory;
                }
            }
            function get_vm_name {
                description "Function to query rule's vcenter.evpn/get-vsphere-details database table and collect VM names";
                path get_vsphere_details.py;
                method get_vm_name;
                argument db_port {
                    mandatory;
                }
                argument db_server_ip {
                    mandatory;
                }
                argument remote_host_name {
                    mandatory;
                }
                argument vsphere_device {
                    mandatory;
                }
                argument vsphere_device_group {
                    mandatory;
                }
            }
            /*
             * Sensor configuration to get data from network devices.
             */
            sensor lldp {
                iAgent {
                    file LldpNbrStatsTable.yml;
                    table LldpNbrStatsTable;
                    frequency 120s;
                }
            }
            /*
             * Constant fields.
             */
            field db-port {
                constant {
                    value "{{db-port}}";
                }
                type string;
                description "Time series database port number";
            }
            field db-server-ip {
                constant {
                    value "{{db-server-ip}}";
                }
                type string;
                description "Time series database IP address";
            }
            field vsphere-device {
                constant {
                    value "{{vsphere-device}}";
                }
                type string;
            }
            field vsphere-device-group {
                constant {
                    value "{{vsphere-device-group}}";
                }
                type string;
            }
            /*
             * Fields defined using sensor paths.
             */
            field lldp-local-interface {
                sensor lldp {
                    path lldp-local-interface;
                }
                type string;
                description "LLDP local interface name";
            }
            field lldp-remote-system-name {
                sensor lldp {
                    path lldp-remote-system-name;
                }
                type string;
                description "ESXi host name in LLDP info";
            }
            /*
             * Fields defined using functions.
             */
            field cluster-name {
                formula {
                    user-defined-function {
                        function-name get_cluster_name;
                        argument remote_host_name "$lldp-remote-system-name";
                        argument db_port "$db-port";
                        argument db_server_ip "$db-server-ip";
                        argument vsphere_device "$vsphere-device";
                        argument vsphere_device_group "$vsphere-device-group";
                    }
                }
                type string;
                description "Queries rule vcenter.evpn/get-vsphere-details database table and collects ESXi cluster name";
            }
            field datacenter-name {
                formula {
                    user-defined-function {
                        function-name get_datacenter_name;
                        argument remote_host_name "$lldp-remote-system-name";
                        argument db_port "$db-port";
                        argument db_server_ip "$db-server-ip";
                        argument vsphere_device "$vsphere-device";
                        argument vsphere_device_group "$vsphere-device-group";
                    }
                }
                type string;
                description "Queries rule vcenter.evpn/get-vsphere-details database table and collects ESXi located datacenter name ";
            }
            field mac-id {
                formula {
                    user-defined-function {
                        function-name get_mac_id;
                        argument remote_host_name "$lldp-remote-system-name";
                        argument db_port "$db-port";
                        argument db_server_ip "$db-server-ip";
                        argument vsphere_device "$vsphere-device";
                        argument vsphere_device_group "$vsphere-device-group";
                    }
                }
                type string;
                description "Queries rule vcenter.evpn/get-vsphere-details database table and collects VMs MAC address";
            }
            field vm-ip {
                formula {
                    user-defined-function {
                        function-name get_vm_ip;
                        argument remote_host_name "$lldp-remote-system-name";
                        argument db_port "$db-port";
                        argument db_server_ip "$db-server-ip";
                        argument vsphere_device "$vsphere-device";
                        argument vsphere_device_group "$vsphere-device-group";
                    }
                }
                type string;
                description "Queries rule vcenter.evpn/get-vsphere-details database table and collects VMs IP address";
            }
            field vm-name {
                formula {
                    user-defined-function {
                        function-name get_vm_name;
                        argument remote_host_name "$lldp-remote-system-name";
                        argument db_port "$db-port";
                        argument db_server_ip "$db-server-ip";
                        argument vsphere_device "$vsphere-device";
                        argument vsphere_device_group "$vsphere-device-group";
                    }
                }
                type string;
                description "Queries rule vcenter.evpn/get-vsphere-details database table and collects VM names";
            }
            /*
             * Anomaly detection logic.
             */
            trigger vsphere-host-mac-mapping {
                frequency 2m;
                term vcenter-host-mapping {
                    when {
                        does-not-match-with "$vm-name" None {
                            ignore-case;
                        }
                        does-not-match-with "$vm-name" Unknown.*;
                    }
                    then {
                        status {
                            color green;
                            message "ESXi_Host:$lldp-remote-system-name, VM_MAC_address:$mac-id, VM_name:$vm-name, VM_IP:$vm-ip, Cluster_name:$cluster-name, DataCenter_name:$datacenter-name, Interface_name:$lldp-local-interface";
                        }
                    }
                }
            }
            /*
             * Variables with default values. Default values can be changed
             * while deploying playbook instance.
             */
            variable db-port {
                value "";
                description "Enter DB server port number e.g. 30086 for HB K8 server";
                type string;
            }
            variable db-server-ip {
                value "";
                description "Enter HB server IP. e.g. 10.87.74.102";
                type string;
            }
            variable vsphere-device {
                value "";
                description "Enter vsphere device e.g. tme_vsphere";
                type string;
            }
            variable vsphere-device-group {
                value "";
                description "Enter vsphere device group name e.g. vcenter";
                type string;
            }
            rule-properties {
                supported-devices {
                    juniper {
                        operating-system junos {
                            products QFX {
                                releases 18.1R1 {
                                    release-support min-supported-release;
                                    platform All;
                                }
                            }
                        }
                    }
                    other-vendor vmware {
                        vendor-name vsphere;
                        operating-system vcenter;
                    }
                }
                helper-files other {
                    list-of-files [ get_vsphere_details.py LldpNbrStatsTable.yml ];
                }
            }
        }
    }
}
