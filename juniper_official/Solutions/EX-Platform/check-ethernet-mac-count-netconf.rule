/*
* Monitors the health of MAC count in ethernet switching and notifies
* when anomalies are found
* Two input control detection
*
* 1) vlan-id, is a regular expression that matches the
* VLAN IDs that you would like to monitor. By default
* it's '.*', which matches all VLAN IDs.
*
* 2) static-threshold, is the threshold that causes the rule to report
* an anomaly. By default MAC limit threshold per VLAN is 800 . This
* rule will set a dashboard color to red when MAC count exceeds the
* threshold value. If dynamic threshold of MAC count is equal to 1,
* the color is set to yellow. Otherwise it is set to green.
*/
healthbot {
    topic ethernet.options {
        description "This rule checks health of MAC count in ethernet switching table and notify in case any of the health monitored field crosses threshold";
        synopsis "MAC count check in ethernet switching";
        rule check-ethernet-mac-count-netconf {
            keys vlan-name;
            synopsis "MAC count in ethernet switching table analyzer";
            description "This rule checks health of MAC count in ethernet switching table and notify in case any of the health monitored field crosses threshold";
            /*
             * Monitors the health of MAC count in ethernet switching table.
             * Notifies via the dashboard colors when MAC count exceeds the
             * threshold {{$static-threshold}} it sets the color to red. The color is
             * set to yellow if the dynamic threshold ‘$dt-mac-count’ of MAC
             * count is equal to 1. Otherwise the color is set to green.
             *
             * Use vlan-name as key for rule
             *
             * Sensor configuration to get data from network devices.
             */
            sensor mac-count {
                synopsis "mac count netconf based iAgent sensor definition";
                description "iAgent sensor defined in yml file using netconf rpc/cli command and defined fields using pyez tables&views to collect data from network device";
                iAgent {
                    file mac-count.yml;
                    table MacCountTable;
                    frequency 60s;
                }
            }
            /*
             * Fields defined using formulae by user-defined function
             */
            field dt-mac-count {
                formula {
                    dynamic-threshold { ## Warning: 'dynamic-threshold' is deprecated
                        algorithm 3sigma;
                        learning-period 7d;
                        pattern-periodicity 1d,1h;
                        field-name "$mac-count";
                    }
                }
                type integer;
            }
            /*
             * Fields defined using sensor path. Map the longer sensor names
             * to the shorter field names used in the rules.
             */
            field mac-count {
                sensor mac-count {
                    path rtb-mac-count;
                }
                type integer;
                description "This filed is for mac count";
            }
            /*
             * Field defined with variable and constant value
             */
            field threshold {
                constant {
                    value "{{static-threshold}}";
                }
                type integer;
            }
            field vlan-name {
                sensor mac-count {
                    where "vlan-name =~ /{{vlan-id}}/";
                    path vlan-name;
                }
                type string;
                description "VLAN ID";
            }
            /*
             * Anomaly detection logic.
             */
            trigger mac-count {
                synopsis "MAC count kpi";
                description "Sets health based on MAC count in ethernet switching table.";
                frequency 90s;
                /*
                 * Sets color to red and sends out an anomaly notification when
                 * the MAC count ($mac-count) is greater than the static threshold
                 * ($threshold).
                 */
                term is-mac-count-above-static-threshold {
                    when {
                        greater-than-or-equal-to "$mac-count" "$threshold";
                    }
                    then {
                        status {
                            color red;
                            message "Observed significant amount of changes in MAC count($mac-count) of VLAN($vlan-name)";
                        }
                    }
                }
                /*
                 * Sets color to yellow and sends out an anomaly notification when
                 * the dynamic threshold ($dt-mac-count) of MAC count is equal to 1.
                 */
                term is-mac-count-above-dynamic-threshold {
                    when {
                        equal-to "$dt-mac-count" 1;
                    }
                    then {
                        status {
                            color yellow;
                            message "Observed changes in MAC count($mac-count) of VLAN($vlan-name)";
                        }
                    }
                }
                /*
                 * Defaults color to green.
                 */
                term mac-count-normal {
                    then {
                        status {
                            color green;
                            message "MAC count($mac-count) of VLAN($vlan-name) is normal";
                        }
                    }
                }
            }
            /*
             * Variables with default values. Default values can be changed
             * while deploying playbook instance.
             */
            variable static-threshold {
                value 800;
                description "Enter MAC limit threshold per VLAN";
                type int;
            }
            variable vlan-id {
                value .*;
                description "Enter VLAN IDs to be monitored.";
                type string;
            }
            rule-properties {
                version 1;
                contributor juniper;
                supported-healthbot-version 3.0.1;
                supported-devices {
                    juniper {
                        operating-system junos {
                            products EX {
                                releases 17.3R1 {
                                    release-support min-supported-release;
                                    platform all;
                                }
                            }
                            products MX {
                                releases 15.1R1 {
                                    release-support min-supported-release;
                                    platform all;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
